// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry.proto

package iet.distributed.telemetry;

/**
 * <pre>
 * information about a single measurement
 * note, that this message can be safely exteneded without breaking compatibility!
 * </pre>
 *
 * Protobuf type {@code iet.distributed.telemetry.Measurement}
 */
public final class Measurement extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:iet.distributed.telemetry.Measurement)
    MeasurementOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Measurement.newBuilder() to construct.
  private Measurement(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Measurement() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Measurement();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Measurement(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            iet.distributed.telemetry.CommonData.Builder subBuilder = null;
            if (commonData_ != null) {
              subBuilder = commonData_.toBuilder();
            }
            commonData_ = input.readMessage(iet.distributed.telemetry.CommonData.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(commonData_);
              commonData_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            iet.distributed.telemetry.TemperatureData.Builder subBuilder = null;
            if (oneOfDataCase_ == 2) {
              subBuilder = ((iet.distributed.telemetry.TemperatureData) oneOfData_).toBuilder();
            }
            oneOfData_ =
                input.readMessage(iet.distributed.telemetry.TemperatureData.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((iet.distributed.telemetry.TemperatureData) oneOfData_);
              oneOfData_ = subBuilder.buildPartial();
            }
            oneOfDataCase_ = 2;
            break;
          }
          case 26: {
            iet.distributed.telemetry.WaterConsumptionData.Builder subBuilder = null;
            if (oneOfDataCase_ == 3) {
              subBuilder = ((iet.distributed.telemetry.WaterConsumptionData) oneOfData_).toBuilder();
            }
            oneOfData_ =
                input.readMessage(iet.distributed.telemetry.WaterConsumptionData.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((iet.distributed.telemetry.WaterConsumptionData) oneOfData_);
              oneOfData_ = subBuilder.buildPartial();
            }
            oneOfDataCase_ = 3;
            break;
          }
          case 34: {
            iet.distributed.telemetry.PowerConsumptionData.Builder subBuilder = null;
            if (oneOfDataCase_ == 4) {
              subBuilder = ((iet.distributed.telemetry.PowerConsumptionData) oneOfData_).toBuilder();
            }
            oneOfData_ =
                input.readMessage(iet.distributed.telemetry.PowerConsumptionData.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((iet.distributed.telemetry.PowerConsumptionData) oneOfData_);
              oneOfData_ = subBuilder.buildPartial();
            }
            oneOfDataCase_ = 4;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return iet.distributed.telemetry.Telemetry.internal_static_iet_distributed_telemetry_Measurement_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return iet.distributed.telemetry.Telemetry.internal_static_iet_distributed_telemetry_Measurement_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            iet.distributed.telemetry.Measurement.class, iet.distributed.telemetry.Measurement.Builder.class);
  }

  private int oneOfDataCase_ = 0;
  private java.lang.Object oneOfData_;
  public enum OneOfDataCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    TEMPERATURE_DATA(2),
    WATER_CONSUMPTION_DATA(3),
    POWER_CONSUMPTION_DATA(4),
    ONEOFDATA_NOT_SET(0);
    private final int value;
    private OneOfDataCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OneOfDataCase valueOf(int value) {
      return forNumber(value);
    }

    public static OneOfDataCase forNumber(int value) {
      switch (value) {
        case 2: return TEMPERATURE_DATA;
        case 3: return WATER_CONSUMPTION_DATA;
        case 4: return POWER_CONSUMPTION_DATA;
        case 0: return ONEOFDATA_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public OneOfDataCase
  getOneOfDataCase() {
    return OneOfDataCase.forNumber(
        oneOfDataCase_);
  }

  public static final int COMMON_DATA_FIELD_NUMBER = 1;
  private iet.distributed.telemetry.CommonData commonData_;
  /**
   * <code>.iet.distributed.telemetry.CommonData common_data = 1;</code>
   * @return Whether the commonData field is set.
   */
  @java.lang.Override
  public boolean hasCommonData() {
    return commonData_ != null;
  }
  /**
   * <code>.iet.distributed.telemetry.CommonData common_data = 1;</code>
   * @return The commonData.
   */
  @java.lang.Override
  public iet.distributed.telemetry.CommonData getCommonData() {
    return commonData_ == null ? iet.distributed.telemetry.CommonData.getDefaultInstance() : commonData_;
  }
  /**
   * <code>.iet.distributed.telemetry.CommonData common_data = 1;</code>
   */
  @java.lang.Override
  public iet.distributed.telemetry.CommonDataOrBuilder getCommonDataOrBuilder() {
    return getCommonData();
  }

  public static final int TEMPERATURE_DATA_FIELD_NUMBER = 2;
  /**
   * <code>.iet.distributed.telemetry.TemperatureData temperature_data = 2;</code>
   * @return Whether the temperatureData field is set.
   */
  @java.lang.Override
  public boolean hasTemperatureData() {
    return oneOfDataCase_ == 2;
  }
  /**
   * <code>.iet.distributed.telemetry.TemperatureData temperature_data = 2;</code>
   * @return The temperatureData.
   */
  @java.lang.Override
  public iet.distributed.telemetry.TemperatureData getTemperatureData() {
    if (oneOfDataCase_ == 2) {
       return (iet.distributed.telemetry.TemperatureData) oneOfData_;
    }
    return iet.distributed.telemetry.TemperatureData.getDefaultInstance();
  }
  /**
   * <code>.iet.distributed.telemetry.TemperatureData temperature_data = 2;</code>
   */
  @java.lang.Override
  public iet.distributed.telemetry.TemperatureDataOrBuilder getTemperatureDataOrBuilder() {
    if (oneOfDataCase_ == 2) {
       return (iet.distributed.telemetry.TemperatureData) oneOfData_;
    }
    return iet.distributed.telemetry.TemperatureData.getDefaultInstance();
  }

  public static final int WATER_CONSUMPTION_DATA_FIELD_NUMBER = 3;
  /**
   * <code>.iet.distributed.telemetry.WaterConsumptionData water_consumption_data = 3;</code>
   * @return Whether the waterConsumptionData field is set.
   */
  @java.lang.Override
  public boolean hasWaterConsumptionData() {
    return oneOfDataCase_ == 3;
  }
  /**
   * <code>.iet.distributed.telemetry.WaterConsumptionData water_consumption_data = 3;</code>
   * @return The waterConsumptionData.
   */
  @java.lang.Override
  public iet.distributed.telemetry.WaterConsumptionData getWaterConsumptionData() {
    if (oneOfDataCase_ == 3) {
       return (iet.distributed.telemetry.WaterConsumptionData) oneOfData_;
    }
    return iet.distributed.telemetry.WaterConsumptionData.getDefaultInstance();
  }
  /**
   * <code>.iet.distributed.telemetry.WaterConsumptionData water_consumption_data = 3;</code>
   */
  @java.lang.Override
  public iet.distributed.telemetry.WaterConsumptionDataOrBuilder getWaterConsumptionDataOrBuilder() {
    if (oneOfDataCase_ == 3) {
       return (iet.distributed.telemetry.WaterConsumptionData) oneOfData_;
    }
    return iet.distributed.telemetry.WaterConsumptionData.getDefaultInstance();
  }

  public static final int POWER_CONSUMPTION_DATA_FIELD_NUMBER = 4;
  /**
   * <code>.iet.distributed.telemetry.PowerConsumptionData power_consumption_data = 4;</code>
   * @return Whether the powerConsumptionData field is set.
   */
  @java.lang.Override
  public boolean hasPowerConsumptionData() {
    return oneOfDataCase_ == 4;
  }
  /**
   * <code>.iet.distributed.telemetry.PowerConsumptionData power_consumption_data = 4;</code>
   * @return The powerConsumptionData.
   */
  @java.lang.Override
  public iet.distributed.telemetry.PowerConsumptionData getPowerConsumptionData() {
    if (oneOfDataCase_ == 4) {
       return (iet.distributed.telemetry.PowerConsumptionData) oneOfData_;
    }
    return iet.distributed.telemetry.PowerConsumptionData.getDefaultInstance();
  }
  /**
   * <code>.iet.distributed.telemetry.PowerConsumptionData power_consumption_data = 4;</code>
   */
  @java.lang.Override
  public iet.distributed.telemetry.PowerConsumptionDataOrBuilder getPowerConsumptionDataOrBuilder() {
    if (oneOfDataCase_ == 4) {
       return (iet.distributed.telemetry.PowerConsumptionData) oneOfData_;
    }
    return iet.distributed.telemetry.PowerConsumptionData.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (commonData_ != null) {
      output.writeMessage(1, getCommonData());
    }
    if (oneOfDataCase_ == 2) {
      output.writeMessage(2, (iet.distributed.telemetry.TemperatureData) oneOfData_);
    }
    if (oneOfDataCase_ == 3) {
      output.writeMessage(3, (iet.distributed.telemetry.WaterConsumptionData) oneOfData_);
    }
    if (oneOfDataCase_ == 4) {
      output.writeMessage(4, (iet.distributed.telemetry.PowerConsumptionData) oneOfData_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (commonData_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getCommonData());
    }
    if (oneOfDataCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (iet.distributed.telemetry.TemperatureData) oneOfData_);
    }
    if (oneOfDataCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (iet.distributed.telemetry.WaterConsumptionData) oneOfData_);
    }
    if (oneOfDataCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (iet.distributed.telemetry.PowerConsumptionData) oneOfData_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof iet.distributed.telemetry.Measurement)) {
      return super.equals(obj);
    }
    iet.distributed.telemetry.Measurement other = (iet.distributed.telemetry.Measurement) obj;

    if (hasCommonData() != other.hasCommonData()) return false;
    if (hasCommonData()) {
      if (!getCommonData()
          .equals(other.getCommonData())) return false;
    }
    if (!getOneOfDataCase().equals(other.getOneOfDataCase())) return false;
    switch (oneOfDataCase_) {
      case 2:
        if (!getTemperatureData()
            .equals(other.getTemperatureData())) return false;
        break;
      case 3:
        if (!getWaterConsumptionData()
            .equals(other.getWaterConsumptionData())) return false;
        break;
      case 4:
        if (!getPowerConsumptionData()
            .equals(other.getPowerConsumptionData())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasCommonData()) {
      hash = (37 * hash) + COMMON_DATA_FIELD_NUMBER;
      hash = (53 * hash) + getCommonData().hashCode();
    }
    switch (oneOfDataCase_) {
      case 2:
        hash = (37 * hash) + TEMPERATURE_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getTemperatureData().hashCode();
        break;
      case 3:
        hash = (37 * hash) + WATER_CONSUMPTION_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getWaterConsumptionData().hashCode();
        break;
      case 4:
        hash = (37 * hash) + POWER_CONSUMPTION_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getPowerConsumptionData().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static iet.distributed.telemetry.Measurement parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static iet.distributed.telemetry.Measurement parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static iet.distributed.telemetry.Measurement parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static iet.distributed.telemetry.Measurement parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static iet.distributed.telemetry.Measurement parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static iet.distributed.telemetry.Measurement parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static iet.distributed.telemetry.Measurement parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static iet.distributed.telemetry.Measurement parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static iet.distributed.telemetry.Measurement parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static iet.distributed.telemetry.Measurement parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static iet.distributed.telemetry.Measurement parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static iet.distributed.telemetry.Measurement parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(iet.distributed.telemetry.Measurement prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * information about a single measurement
   * note, that this message can be safely exteneded without breaking compatibility!
   * </pre>
   *
   * Protobuf type {@code iet.distributed.telemetry.Measurement}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:iet.distributed.telemetry.Measurement)
      iet.distributed.telemetry.MeasurementOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return iet.distributed.telemetry.Telemetry.internal_static_iet_distributed_telemetry_Measurement_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return iet.distributed.telemetry.Telemetry.internal_static_iet_distributed_telemetry_Measurement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              iet.distributed.telemetry.Measurement.class, iet.distributed.telemetry.Measurement.Builder.class);
    }

    // Construct using iet.distributed.telemetry.Measurement.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (commonDataBuilder_ == null) {
        commonData_ = null;
      } else {
        commonData_ = null;
        commonDataBuilder_ = null;
      }
      oneOfDataCase_ = 0;
      oneOfData_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return iet.distributed.telemetry.Telemetry.internal_static_iet_distributed_telemetry_Measurement_descriptor;
    }

    @java.lang.Override
    public iet.distributed.telemetry.Measurement getDefaultInstanceForType() {
      return iet.distributed.telemetry.Measurement.getDefaultInstance();
    }

    @java.lang.Override
    public iet.distributed.telemetry.Measurement build() {
      iet.distributed.telemetry.Measurement result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public iet.distributed.telemetry.Measurement buildPartial() {
      iet.distributed.telemetry.Measurement result = new iet.distributed.telemetry.Measurement(this);
      if (commonDataBuilder_ == null) {
        result.commonData_ = commonData_;
      } else {
        result.commonData_ = commonDataBuilder_.build();
      }
      if (oneOfDataCase_ == 2) {
        if (temperatureDataBuilder_ == null) {
          result.oneOfData_ = oneOfData_;
        } else {
          result.oneOfData_ = temperatureDataBuilder_.build();
        }
      }
      if (oneOfDataCase_ == 3) {
        if (waterConsumptionDataBuilder_ == null) {
          result.oneOfData_ = oneOfData_;
        } else {
          result.oneOfData_ = waterConsumptionDataBuilder_.build();
        }
      }
      if (oneOfDataCase_ == 4) {
        if (powerConsumptionDataBuilder_ == null) {
          result.oneOfData_ = oneOfData_;
        } else {
          result.oneOfData_ = powerConsumptionDataBuilder_.build();
        }
      }
      result.oneOfDataCase_ = oneOfDataCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof iet.distributed.telemetry.Measurement) {
        return mergeFrom((iet.distributed.telemetry.Measurement)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(iet.distributed.telemetry.Measurement other) {
      if (other == iet.distributed.telemetry.Measurement.getDefaultInstance()) return this;
      if (other.hasCommonData()) {
        mergeCommonData(other.getCommonData());
      }
      switch (other.getOneOfDataCase()) {
        case TEMPERATURE_DATA: {
          mergeTemperatureData(other.getTemperatureData());
          break;
        }
        case WATER_CONSUMPTION_DATA: {
          mergeWaterConsumptionData(other.getWaterConsumptionData());
          break;
        }
        case POWER_CONSUMPTION_DATA: {
          mergePowerConsumptionData(other.getPowerConsumptionData());
          break;
        }
        case ONEOFDATA_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      iet.distributed.telemetry.Measurement parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (iet.distributed.telemetry.Measurement) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int oneOfDataCase_ = 0;
    private java.lang.Object oneOfData_;
    public OneOfDataCase
        getOneOfDataCase() {
      return OneOfDataCase.forNumber(
          oneOfDataCase_);
    }

    public Builder clearOneOfData() {
      oneOfDataCase_ = 0;
      oneOfData_ = null;
      onChanged();
      return this;
    }


    private iet.distributed.telemetry.CommonData commonData_;
    private com.google.protobuf.SingleFieldBuilderV3<
        iet.distributed.telemetry.CommonData, iet.distributed.telemetry.CommonData.Builder, iet.distributed.telemetry.CommonDataOrBuilder> commonDataBuilder_;
    /**
     * <code>.iet.distributed.telemetry.CommonData common_data = 1;</code>
     * @return Whether the commonData field is set.
     */
    public boolean hasCommonData() {
      return commonDataBuilder_ != null || commonData_ != null;
    }
    /**
     * <code>.iet.distributed.telemetry.CommonData common_data = 1;</code>
     * @return The commonData.
     */
    public iet.distributed.telemetry.CommonData getCommonData() {
      if (commonDataBuilder_ == null) {
        return commonData_ == null ? iet.distributed.telemetry.CommonData.getDefaultInstance() : commonData_;
      } else {
        return commonDataBuilder_.getMessage();
      }
    }
    /**
     * <code>.iet.distributed.telemetry.CommonData common_data = 1;</code>
     */
    public Builder setCommonData(iet.distributed.telemetry.CommonData value) {
      if (commonDataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        commonData_ = value;
        onChanged();
      } else {
        commonDataBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.iet.distributed.telemetry.CommonData common_data = 1;</code>
     */
    public Builder setCommonData(
        iet.distributed.telemetry.CommonData.Builder builderForValue) {
      if (commonDataBuilder_ == null) {
        commonData_ = builderForValue.build();
        onChanged();
      } else {
        commonDataBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.iet.distributed.telemetry.CommonData common_data = 1;</code>
     */
    public Builder mergeCommonData(iet.distributed.telemetry.CommonData value) {
      if (commonDataBuilder_ == null) {
        if (commonData_ != null) {
          commonData_ =
            iet.distributed.telemetry.CommonData.newBuilder(commonData_).mergeFrom(value).buildPartial();
        } else {
          commonData_ = value;
        }
        onChanged();
      } else {
        commonDataBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.iet.distributed.telemetry.CommonData common_data = 1;</code>
     */
    public Builder clearCommonData() {
      if (commonDataBuilder_ == null) {
        commonData_ = null;
        onChanged();
      } else {
        commonData_ = null;
        commonDataBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.iet.distributed.telemetry.CommonData common_data = 1;</code>
     */
    public iet.distributed.telemetry.CommonData.Builder getCommonDataBuilder() {
      
      onChanged();
      return getCommonDataFieldBuilder().getBuilder();
    }
    /**
     * <code>.iet.distributed.telemetry.CommonData common_data = 1;</code>
     */
    public iet.distributed.telemetry.CommonDataOrBuilder getCommonDataOrBuilder() {
      if (commonDataBuilder_ != null) {
        return commonDataBuilder_.getMessageOrBuilder();
      } else {
        return commonData_ == null ?
            iet.distributed.telemetry.CommonData.getDefaultInstance() : commonData_;
      }
    }
    /**
     * <code>.iet.distributed.telemetry.CommonData common_data = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        iet.distributed.telemetry.CommonData, iet.distributed.telemetry.CommonData.Builder, iet.distributed.telemetry.CommonDataOrBuilder> 
        getCommonDataFieldBuilder() {
      if (commonDataBuilder_ == null) {
        commonDataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            iet.distributed.telemetry.CommonData, iet.distributed.telemetry.CommonData.Builder, iet.distributed.telemetry.CommonDataOrBuilder>(
                getCommonData(),
                getParentForChildren(),
                isClean());
        commonData_ = null;
      }
      return commonDataBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        iet.distributed.telemetry.TemperatureData, iet.distributed.telemetry.TemperatureData.Builder, iet.distributed.telemetry.TemperatureDataOrBuilder> temperatureDataBuilder_;
    /**
     * <code>.iet.distributed.telemetry.TemperatureData temperature_data = 2;</code>
     * @return Whether the temperatureData field is set.
     */
    @java.lang.Override
    public boolean hasTemperatureData() {
      return oneOfDataCase_ == 2;
    }
    /**
     * <code>.iet.distributed.telemetry.TemperatureData temperature_data = 2;</code>
     * @return The temperatureData.
     */
    @java.lang.Override
    public iet.distributed.telemetry.TemperatureData getTemperatureData() {
      if (temperatureDataBuilder_ == null) {
        if (oneOfDataCase_ == 2) {
          return (iet.distributed.telemetry.TemperatureData) oneOfData_;
        }
        return iet.distributed.telemetry.TemperatureData.getDefaultInstance();
      } else {
        if (oneOfDataCase_ == 2) {
          return temperatureDataBuilder_.getMessage();
        }
        return iet.distributed.telemetry.TemperatureData.getDefaultInstance();
      }
    }
    /**
     * <code>.iet.distributed.telemetry.TemperatureData temperature_data = 2;</code>
     */
    public Builder setTemperatureData(iet.distributed.telemetry.TemperatureData value) {
      if (temperatureDataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        oneOfData_ = value;
        onChanged();
      } else {
        temperatureDataBuilder_.setMessage(value);
      }
      oneOfDataCase_ = 2;
      return this;
    }
    /**
     * <code>.iet.distributed.telemetry.TemperatureData temperature_data = 2;</code>
     */
    public Builder setTemperatureData(
        iet.distributed.telemetry.TemperatureData.Builder builderForValue) {
      if (temperatureDataBuilder_ == null) {
        oneOfData_ = builderForValue.build();
        onChanged();
      } else {
        temperatureDataBuilder_.setMessage(builderForValue.build());
      }
      oneOfDataCase_ = 2;
      return this;
    }
    /**
     * <code>.iet.distributed.telemetry.TemperatureData temperature_data = 2;</code>
     */
    public Builder mergeTemperatureData(iet.distributed.telemetry.TemperatureData value) {
      if (temperatureDataBuilder_ == null) {
        if (oneOfDataCase_ == 2 &&
            oneOfData_ != iet.distributed.telemetry.TemperatureData.getDefaultInstance()) {
          oneOfData_ = iet.distributed.telemetry.TemperatureData.newBuilder((iet.distributed.telemetry.TemperatureData) oneOfData_)
              .mergeFrom(value).buildPartial();
        } else {
          oneOfData_ = value;
        }
        onChanged();
      } else {
        if (oneOfDataCase_ == 2) {
          temperatureDataBuilder_.mergeFrom(value);
        }
        temperatureDataBuilder_.setMessage(value);
      }
      oneOfDataCase_ = 2;
      return this;
    }
    /**
     * <code>.iet.distributed.telemetry.TemperatureData temperature_data = 2;</code>
     */
    public Builder clearTemperatureData() {
      if (temperatureDataBuilder_ == null) {
        if (oneOfDataCase_ == 2) {
          oneOfDataCase_ = 0;
          oneOfData_ = null;
          onChanged();
        }
      } else {
        if (oneOfDataCase_ == 2) {
          oneOfDataCase_ = 0;
          oneOfData_ = null;
        }
        temperatureDataBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.iet.distributed.telemetry.TemperatureData temperature_data = 2;</code>
     */
    public iet.distributed.telemetry.TemperatureData.Builder getTemperatureDataBuilder() {
      return getTemperatureDataFieldBuilder().getBuilder();
    }
    /**
     * <code>.iet.distributed.telemetry.TemperatureData temperature_data = 2;</code>
     */
    @java.lang.Override
    public iet.distributed.telemetry.TemperatureDataOrBuilder getTemperatureDataOrBuilder() {
      if ((oneOfDataCase_ == 2) && (temperatureDataBuilder_ != null)) {
        return temperatureDataBuilder_.getMessageOrBuilder();
      } else {
        if (oneOfDataCase_ == 2) {
          return (iet.distributed.telemetry.TemperatureData) oneOfData_;
        }
        return iet.distributed.telemetry.TemperatureData.getDefaultInstance();
      }
    }
    /**
     * <code>.iet.distributed.telemetry.TemperatureData temperature_data = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        iet.distributed.telemetry.TemperatureData, iet.distributed.telemetry.TemperatureData.Builder, iet.distributed.telemetry.TemperatureDataOrBuilder> 
        getTemperatureDataFieldBuilder() {
      if (temperatureDataBuilder_ == null) {
        if (!(oneOfDataCase_ == 2)) {
          oneOfData_ = iet.distributed.telemetry.TemperatureData.getDefaultInstance();
        }
        temperatureDataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            iet.distributed.telemetry.TemperatureData, iet.distributed.telemetry.TemperatureData.Builder, iet.distributed.telemetry.TemperatureDataOrBuilder>(
                (iet.distributed.telemetry.TemperatureData) oneOfData_,
                getParentForChildren(),
                isClean());
        oneOfData_ = null;
      }
      oneOfDataCase_ = 2;
      onChanged();;
      return temperatureDataBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        iet.distributed.telemetry.WaterConsumptionData, iet.distributed.telemetry.WaterConsumptionData.Builder, iet.distributed.telemetry.WaterConsumptionDataOrBuilder> waterConsumptionDataBuilder_;
    /**
     * <code>.iet.distributed.telemetry.WaterConsumptionData water_consumption_data = 3;</code>
     * @return Whether the waterConsumptionData field is set.
     */
    @java.lang.Override
    public boolean hasWaterConsumptionData() {
      return oneOfDataCase_ == 3;
    }
    /**
     * <code>.iet.distributed.telemetry.WaterConsumptionData water_consumption_data = 3;</code>
     * @return The waterConsumptionData.
     */
    @java.lang.Override
    public iet.distributed.telemetry.WaterConsumptionData getWaterConsumptionData() {
      if (waterConsumptionDataBuilder_ == null) {
        if (oneOfDataCase_ == 3) {
          return (iet.distributed.telemetry.WaterConsumptionData) oneOfData_;
        }
        return iet.distributed.telemetry.WaterConsumptionData.getDefaultInstance();
      } else {
        if (oneOfDataCase_ == 3) {
          return waterConsumptionDataBuilder_.getMessage();
        }
        return iet.distributed.telemetry.WaterConsumptionData.getDefaultInstance();
      }
    }
    /**
     * <code>.iet.distributed.telemetry.WaterConsumptionData water_consumption_data = 3;</code>
     */
    public Builder setWaterConsumptionData(iet.distributed.telemetry.WaterConsumptionData value) {
      if (waterConsumptionDataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        oneOfData_ = value;
        onChanged();
      } else {
        waterConsumptionDataBuilder_.setMessage(value);
      }
      oneOfDataCase_ = 3;
      return this;
    }
    /**
     * <code>.iet.distributed.telemetry.WaterConsumptionData water_consumption_data = 3;</code>
     */
    public Builder setWaterConsumptionData(
        iet.distributed.telemetry.WaterConsumptionData.Builder builderForValue) {
      if (waterConsumptionDataBuilder_ == null) {
        oneOfData_ = builderForValue.build();
        onChanged();
      } else {
        waterConsumptionDataBuilder_.setMessage(builderForValue.build());
      }
      oneOfDataCase_ = 3;
      return this;
    }
    /**
     * <code>.iet.distributed.telemetry.WaterConsumptionData water_consumption_data = 3;</code>
     */
    public Builder mergeWaterConsumptionData(iet.distributed.telemetry.WaterConsumptionData value) {
      if (waterConsumptionDataBuilder_ == null) {
        if (oneOfDataCase_ == 3 &&
            oneOfData_ != iet.distributed.telemetry.WaterConsumptionData.getDefaultInstance()) {
          oneOfData_ = iet.distributed.telemetry.WaterConsumptionData.newBuilder((iet.distributed.telemetry.WaterConsumptionData) oneOfData_)
              .mergeFrom(value).buildPartial();
        } else {
          oneOfData_ = value;
        }
        onChanged();
      } else {
        if (oneOfDataCase_ == 3) {
          waterConsumptionDataBuilder_.mergeFrom(value);
        }
        waterConsumptionDataBuilder_.setMessage(value);
      }
      oneOfDataCase_ = 3;
      return this;
    }
    /**
     * <code>.iet.distributed.telemetry.WaterConsumptionData water_consumption_data = 3;</code>
     */
    public Builder clearWaterConsumptionData() {
      if (waterConsumptionDataBuilder_ == null) {
        if (oneOfDataCase_ == 3) {
          oneOfDataCase_ = 0;
          oneOfData_ = null;
          onChanged();
        }
      } else {
        if (oneOfDataCase_ == 3) {
          oneOfDataCase_ = 0;
          oneOfData_ = null;
        }
        waterConsumptionDataBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.iet.distributed.telemetry.WaterConsumptionData water_consumption_data = 3;</code>
     */
    public iet.distributed.telemetry.WaterConsumptionData.Builder getWaterConsumptionDataBuilder() {
      return getWaterConsumptionDataFieldBuilder().getBuilder();
    }
    /**
     * <code>.iet.distributed.telemetry.WaterConsumptionData water_consumption_data = 3;</code>
     */
    @java.lang.Override
    public iet.distributed.telemetry.WaterConsumptionDataOrBuilder getWaterConsumptionDataOrBuilder() {
      if ((oneOfDataCase_ == 3) && (waterConsumptionDataBuilder_ != null)) {
        return waterConsumptionDataBuilder_.getMessageOrBuilder();
      } else {
        if (oneOfDataCase_ == 3) {
          return (iet.distributed.telemetry.WaterConsumptionData) oneOfData_;
        }
        return iet.distributed.telemetry.WaterConsumptionData.getDefaultInstance();
      }
    }
    /**
     * <code>.iet.distributed.telemetry.WaterConsumptionData water_consumption_data = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        iet.distributed.telemetry.WaterConsumptionData, iet.distributed.telemetry.WaterConsumptionData.Builder, iet.distributed.telemetry.WaterConsumptionDataOrBuilder> 
        getWaterConsumptionDataFieldBuilder() {
      if (waterConsumptionDataBuilder_ == null) {
        if (!(oneOfDataCase_ == 3)) {
          oneOfData_ = iet.distributed.telemetry.WaterConsumptionData.getDefaultInstance();
        }
        waterConsumptionDataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            iet.distributed.telemetry.WaterConsumptionData, iet.distributed.telemetry.WaterConsumptionData.Builder, iet.distributed.telemetry.WaterConsumptionDataOrBuilder>(
                (iet.distributed.telemetry.WaterConsumptionData) oneOfData_,
                getParentForChildren(),
                isClean());
        oneOfData_ = null;
      }
      oneOfDataCase_ = 3;
      onChanged();;
      return waterConsumptionDataBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        iet.distributed.telemetry.PowerConsumptionData, iet.distributed.telemetry.PowerConsumptionData.Builder, iet.distributed.telemetry.PowerConsumptionDataOrBuilder> powerConsumptionDataBuilder_;
    /**
     * <code>.iet.distributed.telemetry.PowerConsumptionData power_consumption_data = 4;</code>
     * @return Whether the powerConsumptionData field is set.
     */
    @java.lang.Override
    public boolean hasPowerConsumptionData() {
      return oneOfDataCase_ == 4;
    }
    /**
     * <code>.iet.distributed.telemetry.PowerConsumptionData power_consumption_data = 4;</code>
     * @return The powerConsumptionData.
     */
    @java.lang.Override
    public iet.distributed.telemetry.PowerConsumptionData getPowerConsumptionData() {
      if (powerConsumptionDataBuilder_ == null) {
        if (oneOfDataCase_ == 4) {
          return (iet.distributed.telemetry.PowerConsumptionData) oneOfData_;
        }
        return iet.distributed.telemetry.PowerConsumptionData.getDefaultInstance();
      } else {
        if (oneOfDataCase_ == 4) {
          return powerConsumptionDataBuilder_.getMessage();
        }
        return iet.distributed.telemetry.PowerConsumptionData.getDefaultInstance();
      }
    }
    /**
     * <code>.iet.distributed.telemetry.PowerConsumptionData power_consumption_data = 4;</code>
     */
    public Builder setPowerConsumptionData(iet.distributed.telemetry.PowerConsumptionData value) {
      if (powerConsumptionDataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        oneOfData_ = value;
        onChanged();
      } else {
        powerConsumptionDataBuilder_.setMessage(value);
      }
      oneOfDataCase_ = 4;
      return this;
    }
    /**
     * <code>.iet.distributed.telemetry.PowerConsumptionData power_consumption_data = 4;</code>
     */
    public Builder setPowerConsumptionData(
        iet.distributed.telemetry.PowerConsumptionData.Builder builderForValue) {
      if (powerConsumptionDataBuilder_ == null) {
        oneOfData_ = builderForValue.build();
        onChanged();
      } else {
        powerConsumptionDataBuilder_.setMessage(builderForValue.build());
      }
      oneOfDataCase_ = 4;
      return this;
    }
    /**
     * <code>.iet.distributed.telemetry.PowerConsumptionData power_consumption_data = 4;</code>
     */
    public Builder mergePowerConsumptionData(iet.distributed.telemetry.PowerConsumptionData value) {
      if (powerConsumptionDataBuilder_ == null) {
        if (oneOfDataCase_ == 4 &&
            oneOfData_ != iet.distributed.telemetry.PowerConsumptionData.getDefaultInstance()) {
          oneOfData_ = iet.distributed.telemetry.PowerConsumptionData.newBuilder((iet.distributed.telemetry.PowerConsumptionData) oneOfData_)
              .mergeFrom(value).buildPartial();
        } else {
          oneOfData_ = value;
        }
        onChanged();
      } else {
        if (oneOfDataCase_ == 4) {
          powerConsumptionDataBuilder_.mergeFrom(value);
        }
        powerConsumptionDataBuilder_.setMessage(value);
      }
      oneOfDataCase_ = 4;
      return this;
    }
    /**
     * <code>.iet.distributed.telemetry.PowerConsumptionData power_consumption_data = 4;</code>
     */
    public Builder clearPowerConsumptionData() {
      if (powerConsumptionDataBuilder_ == null) {
        if (oneOfDataCase_ == 4) {
          oneOfDataCase_ = 0;
          oneOfData_ = null;
          onChanged();
        }
      } else {
        if (oneOfDataCase_ == 4) {
          oneOfDataCase_ = 0;
          oneOfData_ = null;
        }
        powerConsumptionDataBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.iet.distributed.telemetry.PowerConsumptionData power_consumption_data = 4;</code>
     */
    public iet.distributed.telemetry.PowerConsumptionData.Builder getPowerConsumptionDataBuilder() {
      return getPowerConsumptionDataFieldBuilder().getBuilder();
    }
    /**
     * <code>.iet.distributed.telemetry.PowerConsumptionData power_consumption_data = 4;</code>
     */
    @java.lang.Override
    public iet.distributed.telemetry.PowerConsumptionDataOrBuilder getPowerConsumptionDataOrBuilder() {
      if ((oneOfDataCase_ == 4) && (powerConsumptionDataBuilder_ != null)) {
        return powerConsumptionDataBuilder_.getMessageOrBuilder();
      } else {
        if (oneOfDataCase_ == 4) {
          return (iet.distributed.telemetry.PowerConsumptionData) oneOfData_;
        }
        return iet.distributed.telemetry.PowerConsumptionData.getDefaultInstance();
      }
    }
    /**
     * <code>.iet.distributed.telemetry.PowerConsumptionData power_consumption_data = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        iet.distributed.telemetry.PowerConsumptionData, iet.distributed.telemetry.PowerConsumptionData.Builder, iet.distributed.telemetry.PowerConsumptionDataOrBuilder> 
        getPowerConsumptionDataFieldBuilder() {
      if (powerConsumptionDataBuilder_ == null) {
        if (!(oneOfDataCase_ == 4)) {
          oneOfData_ = iet.distributed.telemetry.PowerConsumptionData.getDefaultInstance();
        }
        powerConsumptionDataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            iet.distributed.telemetry.PowerConsumptionData, iet.distributed.telemetry.PowerConsumptionData.Builder, iet.distributed.telemetry.PowerConsumptionDataOrBuilder>(
                (iet.distributed.telemetry.PowerConsumptionData) oneOfData_,
                getParentForChildren(),
                isClean());
        oneOfData_ = null;
      }
      oneOfDataCase_ = 4;
      onChanged();;
      return powerConsumptionDataBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:iet.distributed.telemetry.Measurement)
  }

  // @@protoc_insertion_point(class_scope:iet.distributed.telemetry.Measurement)
  private static final iet.distributed.telemetry.Measurement DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new iet.distributed.telemetry.Measurement();
  }

  public static iet.distributed.telemetry.Measurement getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Measurement>
      PARSER = new com.google.protobuf.AbstractParser<Measurement>() {
    @java.lang.Override
    public Measurement parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Measurement(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Measurement> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Measurement> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public iet.distributed.telemetry.Measurement getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

