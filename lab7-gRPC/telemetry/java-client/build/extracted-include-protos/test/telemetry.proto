syntax = "proto3";

package iet.distributed.telemetry;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option go_package="gen/;gen";

service ResourceMonitor {
  // client communicates with server using bidirectional async communication.
  rpc StreamData(stream BatchedData) returns (stream Acknowledment);
}

message Acknowledment {
  string message = 1;
}

// Data is sent in batches:
// Data from multiple sensors is transmitted in one message.
message BatchedData {
  // when client strted gathering this particular batch
  google.protobuf.Timestamp batch_start = 1;

  // when client sent batched data
  google.protobuf.Timestamp batch_end = 2;

  // batched data
  repeated SensorData sensor_data = 3;
}

// Contains measurements of specified type from a single sensor.
message SensorData {
  SensorMetadata metadata = 1;
  repeated Measurement measurements = 2;
}

// metadata about the sensor
message SensorMetadata {
  string owner = 1;
  string type  = 2;
  DataType data_type  = 3;
}

// Adding another sensor sending different data
// would require adding another field to this enum and
// adding another data type to one_of_data field in Measurement message.
enum DataType {
  TEMPERATURE = 0;
  WATER       = 1;
  POWER       = 2;
  FOO = 3;
}

// information about a single measurement
// note, that this message can be safely exteneded without breaking compatibility!
message Measurement {
  CommonData common_data = 1;

  oneof one_of_data {
    TemperatureData temperature_data = 2;
    WaterConsumptionData water_consumption_data = 3;
    PowerConsumptionData power_consumption_data = 4;
  }
}

// data common to all specific sensors.
message CommonData {
  google.protobuf.Timestamp timestamp = 1;
}

// sensor-specific formats
message TemperatureData {
  double temperature = 1; // temperature measued in celsius.

}

message WaterConsumptionData {
  double water = 1; // current water usage, measured in  l/s
}

message PowerConsumptionData {
  double power = 1; // current power usage, measured in kW
}

// Interface exported by the server.
service RouteGuide {
  // A simple RPC.
  //
  // Obtains the feature at a given position.
  //
  // A feature with an empty name is returned if there's no feature at the given
  // position.
  rpc GetFeature(Point) returns (Feature);

  // A server-to-client streaming RPC.
  //
  // Obtains the Features available within the given Rectangle.  Results are
  // streamed rather than returned at once (e.g. in a response message with a
  // repeated field), as the rectangle may cover a large area and contain a
  // huge number of features.
  rpc ListFeatures(Rectangle) returns (stream Feature);

  // A client-to-server streaming RPC.
  //
  // Accepts a stream of Points on a route being traversed, returning a
  // RouteSummary when traversal is completed.
  rpc RecordRoute(stream Point) returns (RouteSummary);

  // A Bidirectional streaming RPC.
  //
  // Accepts a stream of RouteNotes sent while a route is being traversed,
  // while receiving other RouteNotes (e.g. from other users).
  rpc RouteChat(stream RouteNote) returns (stream RouteNote);
}

// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
message Point {
  int32 latitude = 1;
  int32 longitude = 2;
}

// A latitude-longitude rectangle, represented as two diagonally opposite
// points "lo" and "hi".
message Rectangle {
  // One corner of the rectangle.
  Point lo = 1;

  // The other corner of the rectangle.
  Point hi = 2;
}

// A feature names something at a given point.
//
// If a feature could not be named, the name is empty.
message Feature {
  // The name of the feature.
  string name = 1;

  // The point where the feature is detected.
  Point location = 2;
}

// Not used in the RPC.  Instead, this is here for the form serialized to disk.
message FeatureDatabase {
  repeated Feature feature = 1;
}

// A RouteNote is a message sent while at a given point.
message RouteNote {
  // The location from which the message is sent.
  Point location = 1;

  // The message to be sent.
  string message = 2;
}

// A RouteSummary is received in response to a RecordRoute rpc.
//
// It contains the number of individual points received, the number of
// detected features, and the total distance covered as the cumulative sum of
// the distance between each point.
message RouteSummary {
  // The number of points received.
  int32 point_count = 1;

  // The number of known features passed while traversing the route.
  int32 feature_count = 2;

  // The distance covered in metres.
  int32 distance = 3;

  // The duration of the traversal.
  google.protobuf.Duration elapsed_time = 4;
}